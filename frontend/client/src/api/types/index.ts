/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Host.WebApi | v1
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { axiosInstance } from "../mutator/axios-instance";
import type { ErrorType, BodyType } from "../mutator/axios-instance";
export type GetApiV1PostsId500 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export type GetApiV1PostsId400 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export type PostApiV1Posts500 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export type PostApiV1Posts400 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export type GetApiV1Posts500 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export type GetApiV1Posts400 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export type GetApiV1PostsParams = {
  communityId: string;
  pageIndex: number;
  pageSize: number;
};

export type GetApiV1CommunitiesId500 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export type GetApiV1CommunitiesId400 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export type PutApiV1Communities500 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export type PutApiV1Communities400 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export type PostApiV1Communities500 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export type PostApiV1Communities400 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export type GetApiV1Communities500 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export type GetApiV1Communities400 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export type GetApiV1CommunitiesParams = {
  pageIndex: number;
  pageSize: number;
  name?: string;
};

export type GetApiV1UsersMe500 = {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
};

export interface UsersQueriesGetUserByExternalIdResponse {
  id: string;
}

export interface PostsQueriesGetPostsDto {
  id: string;
  publishDate: string;
  title: string;
}

export interface PostsQueriesGetPostsResponse {
  posts: PostsQueriesGetPostsDto[];
  total: number;
}

export interface PostsQueriesGetPostResponse {
  content: string;
  id: string;
  ownerId: string;
  publishDate: string;
  title: string;
}

export interface PostsCommandsAddPostCommand {
  communityId: string;
  content: string;
  id: string;
  title: string;
}

export interface CommunitiesQueriesGetCommunityResponse {
  id: string;
  name: string;
  ownerId: string;
}

export interface CommunitiesQueriesGetCommunitiesDto {
  id: string;
  name: string;
  ownerId: string;
}

export interface CommunitiesQueriesGetCommunitiesResponse {
  communities: CommunitiesQueriesGetCommunitiesDto[];
  total: number;
}

export interface CommunitiesCommandsEditCommunityCommand {
  id: string;
  name: string;
}

export interface CommunitiesCommandsAddCommunityCommand {
  id: string;
  name: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getApiV1UsersMe = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<UsersQueriesGetUserByExternalIdResponse>(
    { url: `/api/v1/users/me`, method: "GET", signal },
    options,
  );
};

export const getGetApiV1UsersMeQueryKey = () => {
  return [`/api/v1/users/me`] as const;
};

export const getGetApiV1UsersMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<void | GetApiV1UsersMe500>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UsersMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersMe>>> = ({
    signal,
  }) => getApiV1UsersMe(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1UsersMe>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiV1UsersMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1UsersMe>>
>;
export type GetApiV1UsersMeQueryError = ErrorType<void | GetApiV1UsersMe500>;

export function useGetApiV1UsersMe<
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<void | GetApiV1UsersMe500>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1UsersMe>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof axiosInstance>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiV1UsersMe<
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<void | GetApiV1UsersMe500>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1UsersMe>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiV1UsersMe<
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<void | GetApiV1UsersMe500>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiV1UsersMe<
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<void | GetApiV1UsersMe500>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiV1UsersMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1Communities = (
  params: GetApiV1CommunitiesParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<CommunitiesQueriesGetCommunitiesResponse>(
    { url: `/api/v1/communities`, method: "GET", params, signal },
    options,
  );
};

export const getGetApiV1CommunitiesQueryKey = (
  params: GetApiV1CommunitiesParams,
) => {
  return [`/api/v1/communities`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1CommunitiesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Communities>>,
  TError = ErrorType<GetApiV1Communities400 | GetApiV1Communities500>,
>(
  params: GetApiV1CommunitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Communities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1CommunitiesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Communities>>
  > = ({ signal }) => getApiV1Communities(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Communities>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiV1CommunitiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Communities>>
>;
export type GetApiV1CommunitiesQueryError = ErrorType<
  GetApiV1Communities400 | GetApiV1Communities500
>;

export function useGetApiV1Communities<
  TData = Awaited<ReturnType<typeof getApiV1Communities>>,
  TError = ErrorType<GetApiV1Communities400 | GetApiV1Communities500>,
>(
  params: GetApiV1CommunitiesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Communities>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Communities>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiV1Communities<
  TData = Awaited<ReturnType<typeof getApiV1Communities>>,
  TError = ErrorType<GetApiV1Communities400 | GetApiV1Communities500>,
>(
  params: GetApiV1CommunitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Communities>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Communities>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiV1Communities<
  TData = Awaited<ReturnType<typeof getApiV1Communities>>,
  TError = ErrorType<GetApiV1Communities400 | GetApiV1Communities500>,
>(
  params: GetApiV1CommunitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Communities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiV1Communities<
  TData = Awaited<ReturnType<typeof getApiV1Communities>>,
  TError = ErrorType<GetApiV1Communities400 | GetApiV1Communities500>,
>(
  params: GetApiV1CommunitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Communities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiV1CommunitiesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Communities = (
  communitiesCommandsAddCommunityCommand: BodyType<CommunitiesCommandsAddCommunityCommand>,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>(
    {
      url: `/api/v1/communities`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: communitiesCommandsAddCommunityCommand,
      signal,
    },
    options,
  );
};

export const getPostApiV1CommunitiesMutationOptions = <
  TError = ErrorType<PostApiV1Communities400 | void | PostApiV1Communities500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Communities>>,
    TError,
    { data: BodyType<CommunitiesCommandsAddCommunityCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Communities>>,
  TError,
  { data: BodyType<CommunitiesCommandsAddCommunityCommand> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Communities>>,
    { data: BodyType<CommunitiesCommandsAddCommunityCommand> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Communities(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1CommunitiesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Communities>>
>;
export type PostApiV1CommunitiesMutationBody =
  BodyType<CommunitiesCommandsAddCommunityCommand>;
export type PostApiV1CommunitiesMutationError = ErrorType<
  PostApiV1Communities400 | void | PostApiV1Communities500
>;

export const usePostApiV1Communities = <
  TError = ErrorType<PostApiV1Communities400 | void | PostApiV1Communities500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Communities>>,
    TError,
    { data: BodyType<CommunitiesCommandsAddCommunityCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Communities>>,
  TError,
  { data: BodyType<CommunitiesCommandsAddCommunityCommand> },
  TContext
> => {
  const mutationOptions = getPostApiV1CommunitiesMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1Communities = (
  communitiesCommandsEditCommunityCommand: BodyType<CommunitiesCommandsEditCommunityCommand>,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<void>(
    {
      url: `/api/v1/communities`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: communitiesCommandsEditCommunityCommand,
    },
    options,
  );
};

export const getPutApiV1CommunitiesMutationOptions = <
  TError = ErrorType<PutApiV1Communities400 | void | PutApiV1Communities500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1Communities>>,
    TError,
    { data: BodyType<CommunitiesCommandsEditCommunityCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1Communities>>,
  TError,
  { data: BodyType<CommunitiesCommandsEditCommunityCommand> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1Communities>>,
    { data: BodyType<CommunitiesCommandsEditCommunityCommand> }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1Communities(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1CommunitiesMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1Communities>>
>;
export type PutApiV1CommunitiesMutationBody =
  BodyType<CommunitiesCommandsEditCommunityCommand>;
export type PutApiV1CommunitiesMutationError = ErrorType<
  PutApiV1Communities400 | void | PutApiV1Communities500
>;

export const usePutApiV1Communities = <
  TError = ErrorType<PutApiV1Communities400 | void | PutApiV1Communities500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1Communities>>,
    TError,
    { data: BodyType<CommunitiesCommandsEditCommunityCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1Communities>>,
  TError,
  { data: BodyType<CommunitiesCommandsEditCommunityCommand> },
  TContext
> => {
  const mutationOptions = getPutApiV1CommunitiesMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1CommunitiesId = (
  id: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<CommunitiesQueriesGetCommunityResponse>(
    { url: `/api/v1/communities/${id}`, method: "GET", signal },
    options,
  );
};

export const getGetApiV1CommunitiesIdQueryKey = (id: string) => {
  return [`/api/v1/communities/${id}`] as const;
};

export const getGetApiV1CommunitiesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
  TError = ErrorType<GetApiV1CommunitiesId400 | GetApiV1CommunitiesId500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1CommunitiesIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1CommunitiesId>>
  > = ({ signal }) => getApiV1CommunitiesId(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiV1CommunitiesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1CommunitiesId>>
>;
export type GetApiV1CommunitiesIdQueryError = ErrorType<
  GetApiV1CommunitiesId400 | GetApiV1CommunitiesId500
>;

export function useGetApiV1CommunitiesId<
  TData = Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
  TError = ErrorType<GetApiV1CommunitiesId400 | GetApiV1CommunitiesId500>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiV1CommunitiesId<
  TData = Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
  TError = ErrorType<GetApiV1CommunitiesId400 | GetApiV1CommunitiesId500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiV1CommunitiesId<
  TData = Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
  TError = ErrorType<GetApiV1CommunitiesId400 | GetApiV1CommunitiesId500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiV1CommunitiesId<
  TData = Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
  TError = ErrorType<GetApiV1CommunitiesId400 | GetApiV1CommunitiesId500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiV1CommunitiesIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1Posts = (
  params: GetApiV1PostsParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<PostsQueriesGetPostsResponse>(
    { url: `/api/v1/posts`, method: "GET", params, signal },
    options,
  );
};

export const getGetApiV1PostsQueryKey = (params: GetApiV1PostsParams) => {
  return [`/api/v1/posts`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1PostsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Posts>>,
  TError = ErrorType<GetApiV1Posts400 | GetApiV1Posts500>,
>(
  params: GetApiV1PostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Posts>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1PostsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Posts>>> = ({
    signal,
  }) => getApiV1Posts(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Posts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiV1PostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Posts>>
>;
export type GetApiV1PostsQueryError = ErrorType<
  GetApiV1Posts400 | GetApiV1Posts500
>;

export function useGetApiV1Posts<
  TData = Awaited<ReturnType<typeof getApiV1Posts>>,
  TError = ErrorType<GetApiV1Posts400 | GetApiV1Posts500>,
>(
  params: GetApiV1PostsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Posts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Posts>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiV1Posts<
  TData = Awaited<ReturnType<typeof getApiV1Posts>>,
  TError = ErrorType<GetApiV1Posts400 | GetApiV1Posts500>,
>(
  params: GetApiV1PostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Posts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Posts>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiV1Posts<
  TData = Awaited<ReturnType<typeof getApiV1Posts>>,
  TError = ErrorType<GetApiV1Posts400 | GetApiV1Posts500>,
>(
  params: GetApiV1PostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Posts>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiV1Posts<
  TData = Awaited<ReturnType<typeof getApiV1Posts>>,
  TError = ErrorType<GetApiV1Posts400 | GetApiV1Posts500>,
>(
  params: GetApiV1PostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Posts>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiV1PostsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Posts = (
  postsCommandsAddPostCommand: BodyType<PostsCommandsAddPostCommand>,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>(
    {
      url: `/api/v1/posts`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postsCommandsAddPostCommand,
      signal,
    },
    options,
  );
};

export const getPostApiV1PostsMutationOptions = <
  TError = ErrorType<PostApiV1Posts400 | void | PostApiV1Posts500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Posts>>,
    TError,
    { data: BodyType<PostsCommandsAddPostCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Posts>>,
  TError,
  { data: BodyType<PostsCommandsAddPostCommand> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Posts>>,
    { data: BodyType<PostsCommandsAddPostCommand> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Posts(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1PostsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Posts>>
>;
export type PostApiV1PostsMutationBody = BodyType<PostsCommandsAddPostCommand>;
export type PostApiV1PostsMutationError = ErrorType<
  PostApiV1Posts400 | void | PostApiV1Posts500
>;

export const usePostApiV1Posts = <
  TError = ErrorType<PostApiV1Posts400 | void | PostApiV1Posts500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Posts>>,
    TError,
    { data: BodyType<PostsCommandsAddPostCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Posts>>,
  TError,
  { data: BodyType<PostsCommandsAddPostCommand> },
  TContext
> => {
  const mutationOptions = getPostApiV1PostsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1PostsId = (
  id: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<PostsQueriesGetPostResponse>(
    { url: `/api/v1/posts/${id}`, method: "GET", signal },
    options,
  );
};

export const getGetApiV1PostsIdQueryKey = (id: string) => {
  return [`/api/v1/posts/${id}`] as const;
};

export const getGetApiV1PostsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
  TError = ErrorType<GetApiV1PostsId400 | GetApiV1PostsId500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1PostsId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1PostsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1PostsId>>> = ({
    signal,
  }) => getApiV1PostsId(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1PostsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiV1PostsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1PostsId>>
>;
export type GetApiV1PostsIdQueryError = ErrorType<
  GetApiV1PostsId400 | GetApiV1PostsId500
>;

export function useGetApiV1PostsId<
  TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
  TError = ErrorType<GetApiV1PostsId400 | GetApiV1PostsId500>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1PostsId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1PostsId>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiV1PostsId<
  TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
  TError = ErrorType<GetApiV1PostsId400 | GetApiV1PostsId500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1PostsId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1PostsId>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiV1PostsId<
  TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
  TError = ErrorType<GetApiV1PostsId400 | GetApiV1PostsId500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1PostsId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiV1PostsId<
  TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
  TError = ErrorType<GetApiV1PostsId400 | GetApiV1PostsId500>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1PostsId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiV1PostsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
