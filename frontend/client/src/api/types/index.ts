/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Host.WebApi
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { axiosInstance } from "../mutator/axios-instance";
import type { ErrorType, BodyType } from "../mutator/axios-instance";
export type GetApiV1PostsParams = {
  communityId: string;
  pageIndex: number;
  pageSize: number;
  title?: string;
};

export type GetApiV1CommunitiesParams = {
  pageIndex: number;
  pageSize: number;
  name?: string;
};

export type GetApiV1CommentsVotesParams = {
  postId: string;
};

export type GetApiV1CommentsParams = {
  postId: string;
};

export interface UsersQueriesGetUserByExternalIdResponse {
  id: string;
  joinedCommunities: string[];
}

export interface ProblemDetails {
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  type?: string | null;
  [key: string]: unknown;
}

export enum PostsEnumsPostVoteType {
  Upvote = "Upvote",
  Downvote = "Downvote",
}
/**
 * @nullable
 */
export type PostsQueriesGetPostsDtoCurrentVote = PostsEnumsPostVoteType | null;

export interface PostsQueriesGetPostsDto {
  /** @nullable */
  currentVote?: PostsQueriesGetPostsDtoCurrentVote;
  down: number;
  id: string;
  publishDate: string;
  title: string;
  up: number;
}

export interface PostsQueriesGetPostsResponse {
  posts: PostsQueriesGetPostsDto[];
  total: number;
}

/**
 * @nullable
 */
export type PostsQueriesGetPostResponseCurrentVote =
  PostsEnumsPostVoteType | null;

export interface PostsQueriesGetPostResponse {
  content: string;
  /** @nullable */
  currentVote?: PostsQueriesGetPostResponseCurrentVote;
  down: number;
  id: string;
  ownerId: string;
  publishDate: string;
  title: string;
  up: number;
}

export interface PostsCommandsVotePostCommand {
  postId: string;
  type: PostsEnumsPostVoteType;
}

export interface PostsCommandsEditPostCommand {
  content: string;
  id: string;
  title: string;
}

export interface PostsCommandsAddPostCommand {
  communityId: string;
  content: string;
  id: string;
  title: string;
}

export interface CommunitiesQueriesGetCommunityResponse {
  id: string;
  name: string;
  ownerId: string;
}

export interface CommunitiesQueriesGetCommunitiesDto {
  id: string;
  name: string;
  ownerId: string;
}

export interface CommunitiesQueriesGetCommunitiesResponse {
  communities: CommunitiesQueriesGetCommunitiesDto[];
  total: number;
}

export interface CommunitiesCommandsLeaveCommunityCommand {
  communityId: string;
}

export interface CommunitiesCommandsJoinCommunityCommand {
  communityId: string;
}

export interface CommunitiesCommandsEditCommunityCommand {
  id: string;
  name: string;
}

export interface CommunitiesCommandsAddCommunityCommand {
  id: string;
  name: string;
}

export interface CommentsQueriesGetCommentVotesResponse {
  commentId: string;
  type: CommentsEnumsCommentVoteType;
}

export interface CommentsProjectionsCommentProjection {
  comments: CommentsProjectionsCommentProjection[];
  content: string;
  down: number;
  id: string;
  ownerId: string;
  parentId: string;
  publishDate: string;
  up: number;
}

export enum CommentsEnumsCommentVoteType {
  Upvote = "Upvote",
  Downvote = "Downvote",
}
export interface CommentsCommandsVoteCommentCommand {
  commentId: string;
  type: CommentsEnumsCommentVoteType;
}

export interface CommentsCommandsEditCommentCommand {
  content: string;
  id: string;
}

export interface CommentsCommandsAddCommentCommand {
  content: string;
  id: string;
  /** @nullable */
  parentId?: string | null;
  postId: string;
  publishDate: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const getApiV1Comments = (
  params: GetApiV1CommentsParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<CommentsProjectionsCommentProjection[]>(
    { url: `/api/v1/comments`, method: "GET", params, signal },
    options,
  );
};

export const getGetApiV1CommentsQueryKey = (params: GetApiV1CommentsParams) => {
  return [`/api/v1/comments`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1CommentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Comments>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Comments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1CommentsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Comments>>
  > = ({ signal }) => getApiV1Comments(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Comments>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiV1CommentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Comments>>
>;
export type GetApiV1CommentsQueryError = ErrorType<ProblemDetails>;

export function useGetApiV1Comments<
  TData = Awaited<ReturnType<typeof getApiV1Comments>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommentsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Comments>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Comments>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiV1Comments<
  TData = Awaited<ReturnType<typeof getApiV1Comments>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Comments>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Comments>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiV1Comments<
  TData = Awaited<ReturnType<typeof getApiV1Comments>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Comments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiV1Comments<
  TData = Awaited<ReturnType<typeof getApiV1Comments>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Comments>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiV1CommentsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Comments = (
  commentsCommandsAddCommentCommand: BodyType<CommentsCommandsAddCommentCommand>,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>(
    {
      url: `/api/v1/comments`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: commentsCommandsAddCommentCommand,
      signal,
    },
    options,
  );
};

export const getPostApiV1CommentsMutationOptions = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Comments>>,
    TError,
    { data: BodyType<CommentsCommandsAddCommentCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Comments>>,
  TError,
  { data: BodyType<CommentsCommandsAddCommentCommand> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Comments>>,
    { data: BodyType<CommentsCommandsAddCommentCommand> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Comments(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1CommentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Comments>>
>;
export type PostApiV1CommentsMutationBody =
  BodyType<CommentsCommandsAddCommentCommand>;
export type PostApiV1CommentsMutationError = ErrorType<ProblemDetails | void>;

export const usePostApiV1Comments = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Comments>>,
    TError,
    { data: BodyType<CommentsCommandsAddCommentCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Comments>>,
  TError,
  { data: BodyType<CommentsCommandsAddCommentCommand> },
  TContext
> => {
  const mutationOptions = getPostApiV1CommentsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1Comments = (
  commentsCommandsEditCommentCommand: BodyType<CommentsCommandsEditCommentCommand>,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<void>(
    {
      url: `/api/v1/comments`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: commentsCommandsEditCommentCommand,
    },
    options,
  );
};

export const getPutApiV1CommentsMutationOptions = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1Comments>>,
    TError,
    { data: BodyType<CommentsCommandsEditCommentCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1Comments>>,
  TError,
  { data: BodyType<CommentsCommandsEditCommentCommand> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1Comments>>,
    { data: BodyType<CommentsCommandsEditCommentCommand> }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1Comments(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1CommentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1Comments>>
>;
export type PutApiV1CommentsMutationBody =
  BodyType<CommentsCommandsEditCommentCommand>;
export type PutApiV1CommentsMutationError = ErrorType<ProblemDetails | void>;

export const usePutApiV1Comments = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1Comments>>,
    TError,
    { data: BodyType<CommentsCommandsEditCommentCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1Comments>>,
  TError,
  { data: BodyType<CommentsCommandsEditCommentCommand> },
  TContext
> => {
  const mutationOptions = getPutApiV1CommentsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1CommentsVotes = (
  params: GetApiV1CommentsVotesParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<CommentsQueriesGetCommentVotesResponse[]>(
    { url: `/api/v1/comments/votes`, method: "GET", params, signal },
    options,
  );
};

export const getGetApiV1CommentsVotesQueryKey = (
  params: GetApiV1CommentsVotesParams,
) => {
  return [`/api/v1/comments/votes`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1CommentsVotesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1CommentsVotes>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommentsVotesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommentsVotes>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1CommentsVotesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1CommentsVotes>>
  > = ({ signal }) => getApiV1CommentsVotes(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1CommentsVotes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiV1CommentsVotesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1CommentsVotes>>
>;
export type GetApiV1CommentsVotesQueryError = ErrorType<ProblemDetails>;

export function useGetApiV1CommentsVotes<
  TData = Awaited<ReturnType<typeof getApiV1CommentsVotes>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommentsVotesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommentsVotes>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CommentsVotes>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiV1CommentsVotes<
  TData = Awaited<ReturnType<typeof getApiV1CommentsVotes>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommentsVotesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommentsVotes>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CommentsVotes>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiV1CommentsVotes<
  TData = Awaited<ReturnType<typeof getApiV1CommentsVotes>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommentsVotesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommentsVotes>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiV1CommentsVotes<
  TData = Awaited<ReturnType<typeof getApiV1CommentsVotes>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommentsVotesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommentsVotes>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiV1CommentsVotesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1CommentsVote = (
  commentsCommandsVoteCommentCommand: BodyType<CommentsCommandsVoteCommentCommand>,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>(
    {
      url: `/api/v1/comments/vote`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: commentsCommandsVoteCommentCommand,
      signal,
    },
    options,
  );
};

export const getPostApiV1CommentsVoteMutationOptions = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1CommentsVote>>,
    TError,
    { data: BodyType<CommentsCommandsVoteCommentCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1CommentsVote>>,
  TError,
  { data: BodyType<CommentsCommandsVoteCommentCommand> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1CommentsVote>>,
    { data: BodyType<CommentsCommandsVoteCommentCommand> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1CommentsVote(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1CommentsVoteMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1CommentsVote>>
>;
export type PostApiV1CommentsVoteMutationBody =
  BodyType<CommentsCommandsVoteCommentCommand>;
export type PostApiV1CommentsVoteMutationError =
  ErrorType<ProblemDetails | void>;

export const usePostApiV1CommentsVote = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1CommentsVote>>,
    TError,
    { data: BodyType<CommentsCommandsVoteCommentCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1CommentsVote>>,
  TError,
  { data: BodyType<CommentsCommandsVoteCommentCommand> },
  TContext
> => {
  const mutationOptions = getPostApiV1CommentsVoteMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Communities = (
  params: GetApiV1CommunitiesParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<CommunitiesQueriesGetCommunitiesResponse>(
    { url: `/api/v1/communities`, method: "GET", params, signal },
    options,
  );
};

export const getGetApiV1CommunitiesQueryKey = (
  params: GetApiV1CommunitiesParams,
) => {
  return [`/api/v1/communities`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1CommunitiesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Communities>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommunitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Communities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1CommunitiesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Communities>>
  > = ({ signal }) => getApiV1Communities(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Communities>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiV1CommunitiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Communities>>
>;
export type GetApiV1CommunitiesQueryError = ErrorType<ProblemDetails>;

export function useGetApiV1Communities<
  TData = Awaited<ReturnType<typeof getApiV1Communities>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommunitiesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Communities>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Communities>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiV1Communities<
  TData = Awaited<ReturnType<typeof getApiV1Communities>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommunitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Communities>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Communities>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiV1Communities<
  TData = Awaited<ReturnType<typeof getApiV1Communities>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommunitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Communities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiV1Communities<
  TData = Awaited<ReturnType<typeof getApiV1Communities>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1CommunitiesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Communities>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiV1CommunitiesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Communities = (
  communitiesCommandsAddCommunityCommand: BodyType<CommunitiesCommandsAddCommunityCommand>,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>(
    {
      url: `/api/v1/communities`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: communitiesCommandsAddCommunityCommand,
      signal,
    },
    options,
  );
};

export const getPostApiV1CommunitiesMutationOptions = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Communities>>,
    TError,
    { data: BodyType<CommunitiesCommandsAddCommunityCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Communities>>,
  TError,
  { data: BodyType<CommunitiesCommandsAddCommunityCommand> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Communities>>,
    { data: BodyType<CommunitiesCommandsAddCommunityCommand> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Communities(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1CommunitiesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Communities>>
>;
export type PostApiV1CommunitiesMutationBody =
  BodyType<CommunitiesCommandsAddCommunityCommand>;
export type PostApiV1CommunitiesMutationError =
  ErrorType<ProblemDetails | void>;

export const usePostApiV1Communities = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Communities>>,
    TError,
    { data: BodyType<CommunitiesCommandsAddCommunityCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Communities>>,
  TError,
  { data: BodyType<CommunitiesCommandsAddCommunityCommand> },
  TContext
> => {
  const mutationOptions = getPostApiV1CommunitiesMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1Communities = (
  communitiesCommandsEditCommunityCommand: BodyType<CommunitiesCommandsEditCommunityCommand>,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<void>(
    {
      url: `/api/v1/communities`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: communitiesCommandsEditCommunityCommand,
    },
    options,
  );
};

export const getPutApiV1CommunitiesMutationOptions = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1Communities>>,
    TError,
    { data: BodyType<CommunitiesCommandsEditCommunityCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1Communities>>,
  TError,
  { data: BodyType<CommunitiesCommandsEditCommunityCommand> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1Communities>>,
    { data: BodyType<CommunitiesCommandsEditCommunityCommand> }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1Communities(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1CommunitiesMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1Communities>>
>;
export type PutApiV1CommunitiesMutationBody =
  BodyType<CommunitiesCommandsEditCommunityCommand>;
export type PutApiV1CommunitiesMutationError = ErrorType<ProblemDetails | void>;

export const usePutApiV1Communities = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1Communities>>,
    TError,
    { data: BodyType<CommunitiesCommandsEditCommunityCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1Communities>>,
  TError,
  { data: BodyType<CommunitiesCommandsEditCommunityCommand> },
  TContext
> => {
  const mutationOptions = getPutApiV1CommunitiesMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1CommunitiesId = (
  id: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<CommunitiesQueriesGetCommunityResponse>(
    { url: `/api/v1/communities/${id}`, method: "GET", signal },
    options,
  );
};

export const getGetApiV1CommunitiesIdQueryKey = (id: string) => {
  return [`/api/v1/communities/${id}`] as const;
};

export const getGetApiV1CommunitiesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1CommunitiesIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1CommunitiesId>>
  > = ({ signal }) => getApiV1CommunitiesId(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiV1CommunitiesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1CommunitiesId>>
>;
export type GetApiV1CommunitiesIdQueryError = ErrorType<ProblemDetails>;

export function useGetApiV1CommunitiesId<
  TData = Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiV1CommunitiesId<
  TData = Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiV1CommunitiesId<
  TData = Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiV1CommunitiesId<
  TData = Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommunitiesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiV1CommunitiesIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV1CommunitiesId = (
  id: string,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<void>(
    { url: `/api/v1/communities/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteApiV1CommunitiesIdMutationOptions = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1CommunitiesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1CommunitiesId>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1CommunitiesId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1CommunitiesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1CommunitiesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1CommunitiesId>>
>;

export type DeleteApiV1CommunitiesIdMutationError =
  ErrorType<ProblemDetails | void>;

export const useDeleteApiV1CommunitiesId = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1CommunitiesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1CommunitiesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiV1CommunitiesIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1CommunitiesJoin = (
  communitiesCommandsJoinCommunityCommand: BodyType<CommunitiesCommandsJoinCommunityCommand>,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>(
    {
      url: `/api/v1/communities/join`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: communitiesCommandsJoinCommunityCommand,
      signal,
    },
    options,
  );
};

export const getPostApiV1CommunitiesJoinMutationOptions = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1CommunitiesJoin>>,
    TError,
    { data: BodyType<CommunitiesCommandsJoinCommunityCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1CommunitiesJoin>>,
  TError,
  { data: BodyType<CommunitiesCommandsJoinCommunityCommand> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1CommunitiesJoin>>,
    { data: BodyType<CommunitiesCommandsJoinCommunityCommand> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1CommunitiesJoin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1CommunitiesJoinMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1CommunitiesJoin>>
>;
export type PostApiV1CommunitiesJoinMutationBody =
  BodyType<CommunitiesCommandsJoinCommunityCommand>;
export type PostApiV1CommunitiesJoinMutationError =
  ErrorType<ProblemDetails | void>;

export const usePostApiV1CommunitiesJoin = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1CommunitiesJoin>>,
    TError,
    { data: BodyType<CommunitiesCommandsJoinCommunityCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1CommunitiesJoin>>,
  TError,
  { data: BodyType<CommunitiesCommandsJoinCommunityCommand> },
  TContext
> => {
  const mutationOptions = getPostApiV1CommunitiesJoinMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1CommunitiesLeave = (
  communitiesCommandsLeaveCommunityCommand: BodyType<CommunitiesCommandsLeaveCommunityCommand>,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>(
    {
      url: `/api/v1/communities/leave`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: communitiesCommandsLeaveCommunityCommand,
      signal,
    },
    options,
  );
};

export const getPostApiV1CommunitiesLeaveMutationOptions = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1CommunitiesLeave>>,
    TError,
    { data: BodyType<CommunitiesCommandsLeaveCommunityCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1CommunitiesLeave>>,
  TError,
  { data: BodyType<CommunitiesCommandsLeaveCommunityCommand> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1CommunitiesLeave>>,
    { data: BodyType<CommunitiesCommandsLeaveCommunityCommand> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1CommunitiesLeave(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1CommunitiesLeaveMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1CommunitiesLeave>>
>;
export type PostApiV1CommunitiesLeaveMutationBody =
  BodyType<CommunitiesCommandsLeaveCommunityCommand>;
export type PostApiV1CommunitiesLeaveMutationError =
  ErrorType<ProblemDetails | void>;

export const usePostApiV1CommunitiesLeave = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1CommunitiesLeave>>,
    TError,
    { data: BodyType<CommunitiesCommandsLeaveCommunityCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1CommunitiesLeave>>,
  TError,
  { data: BodyType<CommunitiesCommandsLeaveCommunityCommand> },
  TContext
> => {
  const mutationOptions = getPostApiV1CommunitiesLeaveMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Posts = (
  params: GetApiV1PostsParams,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<PostsQueriesGetPostsResponse>(
    { url: `/api/v1/posts`, method: "GET", params, signal },
    options,
  );
};

export const getGetApiV1PostsQueryKey = (params: GetApiV1PostsParams) => {
  return [`/api/v1/posts`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1PostsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Posts>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1PostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Posts>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1PostsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Posts>>> = ({
    signal,
  }) => getApiV1Posts(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Posts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiV1PostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Posts>>
>;
export type GetApiV1PostsQueryError = ErrorType<ProblemDetails>;

export function useGetApiV1Posts<
  TData = Awaited<ReturnType<typeof getApiV1Posts>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1PostsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Posts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Posts>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiV1Posts<
  TData = Awaited<ReturnType<typeof getApiV1Posts>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1PostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Posts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Posts>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiV1Posts<
  TData = Awaited<ReturnType<typeof getApiV1Posts>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1PostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Posts>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiV1Posts<
  TData = Awaited<ReturnType<typeof getApiV1Posts>>,
  TError = ErrorType<ProblemDetails>,
>(
  params: GetApiV1PostsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Posts>>, TError, TData>
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiV1PostsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Posts = (
  postsCommandsAddPostCommand: BodyType<PostsCommandsAddPostCommand>,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>(
    {
      url: `/api/v1/posts`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postsCommandsAddPostCommand,
      signal,
    },
    options,
  );
};

export const getPostApiV1PostsMutationOptions = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Posts>>,
    TError,
    { data: BodyType<PostsCommandsAddPostCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Posts>>,
  TError,
  { data: BodyType<PostsCommandsAddPostCommand> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Posts>>,
    { data: BodyType<PostsCommandsAddPostCommand> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Posts(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1PostsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Posts>>
>;
export type PostApiV1PostsMutationBody = BodyType<PostsCommandsAddPostCommand>;
export type PostApiV1PostsMutationError = ErrorType<ProblemDetails | void>;

export const usePostApiV1Posts = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Posts>>,
    TError,
    { data: BodyType<PostsCommandsAddPostCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Posts>>,
  TError,
  { data: BodyType<PostsCommandsAddPostCommand> },
  TContext
> => {
  const mutationOptions = getPostApiV1PostsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1Posts = (
  postsCommandsEditPostCommand: BodyType<PostsCommandsEditPostCommand>,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<void>(
    {
      url: `/api/v1/posts`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: postsCommandsEditPostCommand,
    },
    options,
  );
};

export const getPutApiV1PostsMutationOptions = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1Posts>>,
    TError,
    { data: BodyType<PostsCommandsEditPostCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1Posts>>,
  TError,
  { data: BodyType<PostsCommandsEditPostCommand> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1Posts>>,
    { data: BodyType<PostsCommandsEditPostCommand> }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1Posts(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1PostsMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1Posts>>
>;
export type PutApiV1PostsMutationBody = BodyType<PostsCommandsEditPostCommand>;
export type PutApiV1PostsMutationError = ErrorType<ProblemDetails | void>;

export const usePutApiV1Posts = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1Posts>>,
    TError,
    { data: BodyType<PostsCommandsEditPostCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1Posts>>,
  TError,
  { data: BodyType<PostsCommandsEditPostCommand> },
  TContext
> => {
  const mutationOptions = getPutApiV1PostsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1PostsId = (
  id: string,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<PostsQueriesGetPostResponse>(
    { url: `/api/v1/posts/${id}`, method: "GET", signal },
    options,
  );
};

export const getGetApiV1PostsIdQueryKey = (id: string) => {
  return [`/api/v1/posts/${id}`] as const;
};

export const getGetApiV1PostsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1PostsId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1PostsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1PostsId>>> = ({
    signal,
  }) => getApiV1PostsId(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1PostsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiV1PostsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1PostsId>>
>;
export type GetApiV1PostsIdQueryError = ErrorType<ProblemDetails>;

export function useGetApiV1PostsId<
  TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1PostsId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1PostsId>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiV1PostsId<
  TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1PostsId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1PostsId>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiV1PostsId<
  TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1PostsId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiV1PostsId<
  TData = Awaited<ReturnType<typeof getApiV1PostsId>>,
  TError = ErrorType<ProblemDetails>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1PostsId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof axiosInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiV1PostsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV1PostsId = (
  id: string,
  options?: SecondParameter<typeof axiosInstance>,
) => {
  return axiosInstance<void>(
    { url: `/api/v1/posts/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteApiV1PostsIdMutationOptions = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1PostsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1PostsId>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1PostsId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1PostsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1PostsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1PostsId>>
>;

export type DeleteApiV1PostsIdMutationError = ErrorType<ProblemDetails | void>;

export const useDeleteApiV1PostsId = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1PostsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1PostsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiV1PostsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1PostsVote = (
  postsCommandsVotePostCommand: BodyType<PostsCommandsVotePostCommand>,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<void>(
    {
      url: `/api/v1/posts/vote`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postsCommandsVotePostCommand,
      signal,
    },
    options,
  );
};

export const getPostApiV1PostsVoteMutationOptions = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1PostsVote>>,
    TError,
    { data: BodyType<PostsCommandsVotePostCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1PostsVote>>,
  TError,
  { data: BodyType<PostsCommandsVotePostCommand> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1PostsVote>>,
    { data: BodyType<PostsCommandsVotePostCommand> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1PostsVote(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1PostsVoteMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1PostsVote>>
>;
export type PostApiV1PostsVoteMutationBody =
  BodyType<PostsCommandsVotePostCommand>;
export type PostApiV1PostsVoteMutationError = ErrorType<ProblemDetails | void>;

export const usePostApiV1PostsVote = <
  TError = ErrorType<ProblemDetails | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1PostsVote>>,
    TError,
    { data: BodyType<PostsCommandsVotePostCommand> },
    TContext
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1PostsVote>>,
  TError,
  { data: BodyType<PostsCommandsVotePostCommand> },
  TContext
> => {
  const mutationOptions = getPostApiV1PostsVoteMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1UsersMe = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<UsersQueriesGetUserByExternalIdResponse>(
    { url: `/api/v1/users/me`, method: "GET", signal },
    options,
  );
};

export const getGetApiV1UsersMeQueryKey = () => {
  return [`/api/v1/users/me`] as const;
};

export const getGetApiV1UsersMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<void | ProblemDetails>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
  >;
  request?: SecondParameter<typeof axiosInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UsersMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1UsersMe>>> = ({
    signal,
  }) => getApiV1UsersMe(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1UsersMe>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiV1UsersMeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1UsersMe>>
>;
export type GetApiV1UsersMeQueryError = ErrorType<void | ProblemDetails>;

export function useGetApiV1UsersMe<
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<void | ProblemDetails>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1UsersMe>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof axiosInstance>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiV1UsersMe<
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<void | ProblemDetails>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1UsersMe>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiV1UsersMe<
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<void | ProblemDetails>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiV1UsersMe<
  TData = Awaited<ReturnType<typeof getApiV1UsersMe>>,
  TError = ErrorType<void | ProblemDetails>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1UsersMe>>, TError, TData>
  >;
  request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiV1UsersMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
